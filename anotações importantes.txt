O flutter é declarativo, ou seja, diferente do html e xml como em projetos android com java, o layout não é feito a partir de "blocos", é o layout é desenvolvido de forma
declarativa a partir da orientação a objetos, criando classes e declarando objetos.

- A construção do seu layout é feita a partir de Widgets, onde cada Widget pode ou não possuir um child (filho). Basicamente é uma forma hierárquica, como o HTML na criação das divs,
 onde temos diversas divs criadas e uma é pai ou filho da outra, mas no caso do flutter, é de forma declarada e com base na orientação a objetos.
- Temos 2 formas de estados do Widget, o global e o local.
- StatelessWidget -> são imutáveis e não alteram seu valor após a sua criação.
- StatefulWidget -> possuem estado mutável, permitindo que suas características mudem e seus valores alterem durante a execução do aplicativo. (setState() -> função que chama o build).
- Sempre quando o app for inicializado, é interessante que por Widget padrão, seja inicializado o MaterialApp > Widget padrão que deixa o layout com mais aparência de aplicativo.

No flutter nós temos o Widget mais padrão que no caso é o Container(), ele pode ser considerado como uma div, que quando criamos é um elemento vazio que podemos colocar tamanho nele, 
como altura, largura, color. No entanto, caso queiramos dentro deste Container, colocar um child (filho), com um OUTRO CONTAINER, um menor com cor diferente, este Container filho representado
filho child, irá herdar as propriedades do seu container pai, como a altura e a largura. Para resolver este pequeno detalhe, sempre quando queremos criar um container filho dentro de outro container pai,
utilizando sempre o child (filho), precisamos sempre dizer que este child é um SingleChildRenderObjectWidget -> para poder "renderizar" um elemento dentro do outro. Como dizemos isto? Simples: 
quando declararmos um child dentro de um Container pai, iremos declarar uma classe que extende de SingleChildRenderObjectWidget, pode ser a classe Center(), ou a classe Align(). Depois de
declarar a classe que extende de SingleChildRenderObjectWidget, colocamos outro child para esta classe, e ai sim as propriedades do elemento, podendo ser um quadrado menor com color diferente
do Container pai.

Construção de layouts:

Na construção dos layouts no flutter acaba sendo talvez mais fácil do que html para quem entende bem de Programação orientada a objetos, isso por ser declarativa, então na construção dos layouts,
você vai criando e desenvolvendo de cima para baixo, sempre criando Widgets, como Containers vazios com um heigth (altura) para dar espaçamento entre dois elementos. Por si só é de fácil entendimento, o que acaba complicando e deixando confuso, é que precisamos escrever muito código declarativo, tudo deve ser declarado.
- Podemos colocar elementos um abaixo do outro, utilizamos o Widget: Column(), e para deixa um ao lado do outro, utilizamos  Widget: Row(). Em ambos não criamos um "filho" (child), e sim "filhos, com children, e nele podemos colocar mais Widgets e personalizar de acordo com o aplicativo.
- Para alinhar ao centro, temos algumas propriedades como: mainAxisAlignment  e crossAxisAlignment.
